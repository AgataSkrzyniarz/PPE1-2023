#!/usr/bin/env bash

while read -r line;
do
	echo ${line};
done < "urls/fr.txt"

Exercice 1
1. Pourquoi ne pas utiliser cat ?
Il est préférable d'utiliser la commande while read plutôt que cat car while read lit le fichier ligne par ligne, ce qui permet de travailler sur des fichiers volumineux sans avoir à charger tout le fichier en mémoire en une seule fois.
2. Comment transformer "urls/fr.txt" en paramètre du script ?

#!/usr/bin/env bash

chemin=$1
while read -r line;
do
	echo ${line};
done < "$1"

dans terminal :
cd ~/Documents/TAL/PPE/PPE1-2023/mini-projet/programmes
chmod +x miniprojet.sh
cd ..
./programmes/miniprojet.sh urls/fr.txt


2.1 S’assurer qu’on donne bien un argument au script, sinon on s’arrête

#!/usr/bin/env bash

chemin=$1

if [ $# -eq 1 ]
then
	while read -r line;
	do
	echo ${line};
done < "$1"
else
	exit
fi


3. Comment afficher le numéro de ligne avant chaque URL (sur la même ligne) ?
• Bien séparer les valeurs par des tabulations

#!/usr/bin/env bash

chemin="$1"

if [ $# -eq 1 ]
then
  num_ligne=1  # Initialise le numéro de ligne à 1
  while read -r line;
  do
    echo -e "$num_ligne\t$line";  # Affiche le numéro de ligne suivi de l'URL avec une tabulation
    ((num_ligne++))  # Incrémente le numéro de ligne
  done < "$chemin"
else
  exit
fi


Exercice 2
Après l’exercice 1 fait, on va rajouter des informations à chaque ligne, toujours séparées par des tabulations :
1. le code HTTP de réponse à la requête
1.1 certaines erreurs peuvent être corrigées

#!/usr/bin/env bash

chemin="$1"

if [ $# -eq 1 ]
then
  num_ligne=1
  while read -r line;
  do
    http_code=$(curl -I -s -o /dev/null -w "%{http_code}" "$line")
    echo -e "$num_ligne\t$line\t$http_code";
    ((num_ligne++))
  done < "$chemin"
else
  exit
fi


2. l’encodage de la page, s’il est présent


#!/usr/bin/env bash

chemin="$1"

if [ $# -eq 1 ]
then
  num_ligne=1
  while read -r line;
  do
    http_code=$(curl -I -s -o /dev/null -w "%{http_code}" "$line")
    encoding=$(curl -s -o /dev/null -w "%{size_download}\t%{content_type}\n" "$line" | awk -F'\t' '{print $2}' | cut -d= -f2)
    echo -e "$num_ligne\t$line\t$http_code\t$encoding";
    ((num_ligne++))
  done < "$chemin"
else
  exit
fi

































